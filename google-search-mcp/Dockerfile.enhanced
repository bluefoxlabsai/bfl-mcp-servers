# Enhanced Google Search MCP Server Dockerfile
# Multi-stage build for production-ready deployment

FROM python:3.11-slim as builder

# Set build arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast Python package management
RUN pip install --no-cache-dir uv

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml ./

# Install Python dependencies only
RUN uv pip install --system fastmcp google-api-python-client python-dotenv

# Production stage
FROM python:3.11-slim as production

# Create non-root user for security
RUN groupadd -r mcpuser && useradd -r -g mcpuser -u 1001 mcpuser

# Install runtime dependencies and Python packages
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && pip install --no-cache-dir fastmcp google-api-python-client python-dotenv

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=mcpuser:mcpuser . .

# Make sure the virtual environment is in PATH (not needed since we're using system packages)
# ENV PATH="/app/.venv/bin:$PATH"

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Environment variables for Google API (to be set at runtime)
ENV GOOGLE_API_KEY=""
ENV GOOGLE_CSE_ID=""

# Expose port
EXPOSE 8000

# Switch to non-root user
USER mcpuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health', timeout=5)" || exit 1

# Default command - can be overridden
CMD ["python", "enhanced_google_search_server.py", "--host", "0.0.0.0", "--port", "8000"]