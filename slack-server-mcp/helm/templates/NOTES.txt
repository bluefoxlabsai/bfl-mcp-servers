1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if eq (include "slack-mcp-server.serviceEnabled" .) "true" }}
{{- if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "slack-mcp-server.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "slack-mcp-server.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "slack-mcp-server.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "slack-mcp-server.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
{{- else }}
{{- if eq .Values.mcp.transport "stdio" }}

ðŸŽ‰ Slack MCP Server has been deployed in STDIO mode!

To connect to the server, use kubectl exec:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "slack-mcp-server.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  
  # Connect via kubectl exec
  kubectl exec --namespace {{ .Release.Namespace }} -it $POD_NAME -- uv run slack-mcp-server

Available Slack MCP Tools:
  â€¢ slack_list_channels      - List public channels
  â€¢ slack_post_message       - Post messages to channels
  â€¢ slack_reply_to_thread    - Reply to message threads
  â€¢ slack_add_reaction       - Add emoji reactions
  â€¢ slack_get_channel_history - Get channel message history
  â€¢ slack_get_thread_replies - Get thread replies
  â€¢ slack_get_users          - Get workspace users
  â€¢ slack_get_user_profiles  - Get user profile information
  â€¢ slack_search_messages    - Search messages with filters
  â€¢ slack_search_channels    - Search for channels
  â€¢ slack_search_users       - Search for users

{{- else if eq .Values.mcp.transport "sse" }}

ðŸŽ‰ Slack MCP Server has been deployed in SSE mode!

The server is running with Server-Sent Events transport.
MCP endpoint available at: /sse
Health check endpoint: /health

{{- else }}

ðŸŽ‰ Slack MCP Server has been deployed in HTTP mode!
{{- end }}
{{- end }}

Configuration:
  Transport: {{ .Values.mcp.transport }}
  {{- if .Values.slack.safeSearch }}
  Safe Search: enabled
  {{- end }}

For more information and examples, visit:
https://github.com/bluefoxlabsai/bfl-mcp-servers/tree/main/slack-server-mcp