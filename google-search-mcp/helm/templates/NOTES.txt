{{- if eq .Values.mcp.transport "stdio" }}
1. Get the pod name and connect to the MCP server:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "google-search-mcp.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  
2. To run the MCP server interactively:
  kubectl exec -it $POD_NAME --namespace {{ .Release.Namespace }} -- python {{ include "google-search-mcp.serverScript" . }}

3. To test the server:
  kubectl exec -it $POD_NAME --namespace {{ .Release.Namespace }} -- python {{ include "google-search-mcp.serverScript" . }} --help

4. For MCP client integration, use kubectl as transport:
   {
     "mcpServers": {
       "google-search-mcp": {
         "command": "kubectl",
         "args": [
           "exec", "-i", "POD_NAME", "--namespace", "{{ .Release.Namespace }}", "--",
           "python", "{{ include "google-search-mcp.serverScript" . }}"
         ]
       }
     }
   }

{{- if eq .Values.mcp.serverType "enhanced" }}
5. Available enhanced search tools:
   - search_google: Comprehensive web search with pagination and localization
   - search_images: Image search with size/type filters
   - search_by_date_range: Date-filtered search
   - search_site_specific: Site-restricted search
   - search_file_type: File type search (PDF, DOC, etc.)
   - search_related: Find related pages
   - search_cached: Get cached page versions
   - get_search_suggestions: Get search suggestions
   - get_api_status: Check API configuration and quota
{{- else }}
5. Available tools:
   - search_google: Basic Google search
{{- end }}

Note: This MCP server uses stdio transport protocol and is accessed via kubectl exec.
{{- else }}
1. Get the service URL:
{{- if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "google-search-mcp.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "MCP Server URL: http://$NODE_IP:$NODE_PORT"
{{- else if contains "LoadBalancer" .Values.service.type }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "google-search-mcp.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "google-search-mcp.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "MCP Server URL: http://$SERVICE_IP:{{ .Values.service.port }}"
{{- else if contains "ClusterIP" .Values.service.type }}
  echo "To access the MCP server, port-forward the service:"
  kubectl --namespace {{ .Release.Namespace }} port-forward service/{{ include "google-search-mcp.fullname" . }} 8080:{{ .Values.service.port }}
  echo "MCP Server URL: http://localhost:8080"
{{- end }}

2. Health check endpoint (for HTTP transports):
  curl http://localhost:8080

3. For LibreChat integration, use {{ .Values.mcp.transport }} transport:
   mcpServers:
     google-search-mcp:
       type: "{{ .Values.mcp.transport }}"
       url: "http://{{ include "google-search-mcp.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}"
       timeout: 30000

{{- if eq .Values.mcp.serverType "enhanced" }}
4. Available enhanced search tools:
   - search_google: Comprehensive web search with pagination and localization
   - search_images: Image search with size/type filters
   - search_by_date_range: Date-filtered search
   - search_site_specific: Site-restricted search
   - search_file_type: File type search (PDF, DOC, etc.)
   - search_related: Find related pages
   - search_cached: Get cached page versions
   - get_search_suggestions: Get search suggestions
   - get_api_status: Check API configuration and quota
{{- else }}
4. Available tools:
   - search_google: Basic Google search
{{- end }}

Note: This MCP server uses {{ .Values.mcp.transport }} transport protocol.
{{- end }}