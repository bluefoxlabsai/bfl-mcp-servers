# Default values for slack-server-mcp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Namespace configuration
# Note: The actual namespace is set via helm install --namespace flag
# This is for documentation purposes
namespace: slack-mcp

# This will set the replicaset count
# More information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# MCP Server Configuration
mcp:
  # Transport protocol: stdio, sse
  transport: "sse" # Use SSE for better Kubernetes cluster compatibility
  
  # Server configuration for SSE transport
  server:
    host: "0.0.0.0"
    port: 8000

# Container image configuration
image:
  repository: ghcr.io/bluefoxlabsai/bfl-mcp-servers/slack-server-mcp
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# Image pull secrets for private repositories
# This is for the secrets for pulling an image from a private repository
# More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# Service account configuration
# This section builds out the service account
# More information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations and labels
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false # App needs to write logs
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
# This is for setting up a service
# More information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # Service is automatically enabled for HTTP/SSE transport, disabled for stdio
  enabled: "auto" # Set to true (quotes) or "auto" (with quotes). Do not mix types.
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/\#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/\#field-spec-ports
  port: 8000

# Ingress configuration
# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: slack-server-mcp.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: slack-server-mcp-tls
  #    hosts:
  #      - slack-server-mcp.local

# HTTPRoute configuration for Gateway API
# -- Expose the service via gateway-api HTTPRoute
# Requires Gateway API resources and suitable controller installed within the cluster
# (see: https://gateway-api.sigs.k8s.io/guides/)
httproute:
  # HTTPRoute enabled.
  enabled: false
  # HTTPRoute parentRefs (required)
  parentRefs: []
  # HTTPRoute hostnames
  hostnames: []
  # HTTPRoute path
  path: "/"

# Horizontal Pod Autoscaler
# This is for setting up the Horizontal Pod Autoscaler
# More information can be found here: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Node selector, tolerations, and affinity
# This is for setting up Node Selector. For more information, check out: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

# This is for setting up Tolerations. For more information, check out: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# This is for setting up Affinity. For more information, check out: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/\#affinity-and-anti-affinity
affinity: {}

# Resource limits and requests
# This is for Resource limits and requests. For more information, check out: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Health probes (enabled for SSE transport)
# Liveness and readiness probes (only enabled for HTTP transport)
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

# Slack Configuration
slack:
  # These will be set as environment variables
  # For security, these should be provided via --set flags or values files
  #
  # HOW TO GENERATE TOKENS:
  # 1. Create Slack app: https://api.slack.com/apps > "Create New App"
  # 2. Bot Token Scopes: channels:read, channels:history, chat:write, reactions:write, users:read, files:read
  # 3. User Token Scopes: search:read, channels:read, users:read
  # 4. Install to workspace and copy tokens
  #
  # DEPLOYMENT EXAMPLES:
  # Via --set flags:
  #   helm install slack-mcp . --set slack.botToken=xoxb-... --set slack.userToken=xoxp-...
  # Via values file override:
  #   helm install slack-mcp . -f production-values.yaml
  
  botToken: "" # SLACK_BOT_TOKEN (starts with xoxb-)
  userToken: "" # SLACK_USER_TOKEN (starts with xoxp-)
  safeSearch: true # SLACK_SAFE_SEARCH (exclude private channels from search)
  
  # Secret configuration - if you prefer to manage secrets externally
  # Create secret: kubectl create secret generic slack-tokens --from-literal=bot-token=xoxb-... --from-literal=user-token=xoxp-...
  # Then set: existingSecret: "slack-tokens"
  existingSecret: ""
  secretKeys:
    botToken: "bot-token" # Key name in the secret for bot token
    userToken: "user-token" # Key name in the secret for user token

# Environment variables
env:
# - name: SLACK_BOT_TOKEN
#   value: "xoxb-your-token"
  - name: UV_CACHE_DIR
    value: "/tmp/.cache/uv"

# Environment variables from ConfigMaps or Secrets
envFrom: []
# - configMapRef:
#     name: slack-config
# - secretRef:
#     name: slack-secrets
