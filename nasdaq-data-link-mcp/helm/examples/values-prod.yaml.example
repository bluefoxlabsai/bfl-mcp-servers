# Production environment values
# Use this for production deployments

replicaCount: 2

# MCP Server Configuration for production
mcp:
  transport: "sse"  # Use SSE for HTTP accessibility
  server:
    host: "0.0.0.0"
    port: 8000

image:
  repository: bfljerum/nasdaq-data-link-mcp
  tag: "v0.2.1"  # Use specific version in production
  pullPolicy: IfNotPresent

# Production resources - higher limits for production workload
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Service configuration
service:
  type: ClusterIP
  port: 8000

# Production ingress with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: nasdaq-mcp.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: nasdaq-mcp-tls
      hosts:
        - nasdaq-mcp.yourdomain.com

# Use existing secret in production (create manually)
secret:
  create: false
  name: "nasdaq-mcp-api-key"

# Security context for production - aligned with Dockerfile
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false  # Need write access for logs
  runAsNonRoot: true
  runAsUser: 1001

# Volume configuration for logs
volumes:
- name: logs
  emptyDir: {}

volumeMounts:
- name: logs
  mountPath: "/app/logs"

# Node affinity for production workloads
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - nasdaq-data-link-mcp
        topologyKey: kubernetes.io/hostname