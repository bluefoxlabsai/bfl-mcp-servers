apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nasdaq-data-link-mcp.fullname" . }}
  labels:
    {{- include "nasdaq-data-link-mcp.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "nasdaq-data-link-mcp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nasdaq-data-link-mcp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nasdaq-data-link-mcp.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if eq .Values.mcp.transport "stdio" }}
          command: ["/bin/sh", "-c"]
          args: 
            - |
              echo "Nasdaq Data Link MCP Server is ready (stdio mode)"
              echo "This server uses MCP (Model Context Protocol) via stdio"
              echo "To connect, use: kubectl exec -it <pod-name> -- python nasdaq_data_link_mcp_os/server.py"
              echo "API Key is configured and ready"
              
              # Keep container running for exec access
              while true; do
                sleep 300
                echo "MCP Server container is running - $(date)"
              done
          {{- else }}
          command: ["python", "nasdaq_data_link_mcp_os/server.py"]
          args:
            - "--transport"
            - "{{ .Values.mcp.transport }}"
          {{- end }}
          env:
            - name: PYTHONPATH
              value: "/app"
            {{- if .Values.secret.create }}
            - name: NASDAQ_DATA_LINK_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "nasdaq-data-link-mcp.secretName" . }}
                  key: nasdaq-api-key
            {{- end }}
          {{- if ne .Values.mcp.transport "stdio" }}
          ports:
            - name: http
              containerPort: {{ .Values.mcp.server.port }}
              protocol: TCP
          {{- end }}
          {{- if and .Values.livenessProbe.enabled (ne .Values.mcp.transport "stdio") }}
          livenessProbe:
            {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if and .Values.readinessProbe.enabled (ne .Values.mcp.transport "stdio") }}
          readinessProbe:
            {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
